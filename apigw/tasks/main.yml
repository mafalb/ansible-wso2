---

- name: is API Gateway already present?
  stat:
    path: "{{ wso2.dir }}/wso2am-{{ wso2.version }}"
  register: __wso_is_installed
  changed_when: no
  tags:
    - always

- debug: var=__wso_is_installed
  tags:
    - debug

- debug: var=wso2
  tags:
    - debug

- name: install API Gateway
  unarchive:
    creates: "{{ wso2.dir }}/wso2am-{{ wso2.version }}"
    src: files/wso2am-{{ wso2.version }}.zip
    dest: "{{ wso2.dir }}"
    owner: "{{ wso2.user }}"
    group: "{{ wso2.user }}"
  tags:
    - install

- name: remove provided keystores
  tags:
    - install
  when: 
    - __wso_is_installed.stat.exists == false
    - wso2.default_keystore != true
  with_items:
    - "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/resources/security/wso2carbon.jks"
    - "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/resources/security/client-truststore.jks"
  file:
    path: "{{ item }}"
    state: absent

- name: java_keystore/selfsigned
  tags:
    - cfg
  when: wso2.default_keystore != true
  import_role:
    name: java_keystore/selfsigned
  vars:
    data:
      alias: wso2carbon
      dest: "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/resources/security/wso2carbon.jks"
      dn: CN=localhost
      san: dns:localhost,ip:127.0.0.1
      password: wso2carbon

- name: export the newly created self signed certificate
  tags:
    - cfg
  when: wso2.default_keystore != true
  import_role:
    name: java_keystore/export
  vars:
    data:
      alias: wso2carbon
      keystore: "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/resources/security/wso2carbon.jks"
      dest: /etc/pki/tls/certs/wso2carbon.cert
      password: wso2carbon

- name: import the certificate into the truststore
  tags:
    - cfg
  when: wso2.default_keystore != True
  import_role:
    name: java_keystore/import
  vars:
    data:
      alias: wso2carbon
      keystore: "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/resources/security/client-truststore.jks"
      password: wso2carbon
      src: /etc/pki/tls/certs/wso2carbon.cert
 
- name: java_keystore/selfsigned
  tags:
    - cfg
  import_role:
    name: java_keystore/selfsigned
  vars:
    data:
      alias: "{{ ansible_hostname }}"
      dest: "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/resources/security/{{ ansible_hostname }}.jks"
      dn: CN={{ ansible_fqdn }}
      san: dns:{{ ansible_fqdn }}
      password: "{{ wso2.keystore_password }}"

- name: export the newly created self signed certificate
  tags:
    - cfg
  when: wso2.default_keystore != true
  import_role:
    name: java_keystore/export
  vars:
    data:
      alias: "{{ ansible_hostname }}"
      keystore: "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/resources/security/{{ ansible_hostname }}.jks"
      dest: /etc/pki/tls/certs/{{ ansible_fqdn }}.cert
      password: "{{ wso2.keystore_password }}"

- name: import the certificate into the truststore
  tags:
    - cfg
  when: wso2.default_keystore != True
  import_role:
    name: java_keystore/import
  vars:
    data:
      alias: "{{ ansible_hostname }}"
      keystore: "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/resources/security/client-truststore.jks"
      password: wso2carbon
      src: /etc/pki/tls/certs/{{ ansible_fqdn }}.cert

- name: import CA certificates into the truststore
  tags:
    - cfg
  include_role:
    name: java_keystore/import
  vars:
    data:
      alias: "{{ item }}"
      keystore: "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/resources/security/client-truststore.jks"
      password: wso2carbon
      src: /etc/pki/tls/certs/{{ item }}.cert
  with_items: "{{ wso2.cacerts }}"
  when: wso2.external_certificate

- name: import signed certificate into the truststore
  tags:
    - cfg
  import_role:
    name: java_keystore/import
  vars:
    data:
      alias: "{{ ansible_hostname }}"
      keystore: "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/resources/security/client-truststore.jks"
      password: wso2carbon
      src: /etc/pki/tls/certs/{{ ansible_hostname }}.cert
  when: wso2.external_certificate

- name: catalina-server.xml
  template:
    src: "{{ item }}"
    dest: "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/conf/tomcat/catalina-server.xml"
    backup: yes
    owner: root
    group: root
  with_first_found:
    - catalina-server.xml.j2
  notify:
    - restart apigw
  tags:
    - cfg

- name: axis2.xml
  template:
    src: "{{ item }}"
    dest: "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/conf/axis2/axis2.xml"
    backup: yes
    owner: root
    group: root
  with_first_found:
    - axis2.xml.j2
  notify:
    - restart apigw
  tags:
    - cfg

- name: api-manager.xml
  template:
    src: "{{ item }}"
    dest: "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/conf/api-manager.xml"
    backup: yes
    owner: root
    group: root
  with_first_found:
    - api-manager.xml.j2
  notify:
    - restart apigw
  tags:
    - cfg
  when: no

- name: carbon.xml
  template:
    src: "{{ item }}"
    dest: "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/conf/carbon.xml"
    backup: yes
    owner: root
    group: root
  with_first_found:
    - carbon.xml.j2
  notify:
    - restart apigw
  tags:
    - cfg

- name: systemd unit
  template:
    src: wso2apigw.service.j2
    dest: /etc/systemd/system/wso2apigw.service
    backup: yes
  tags:
    - install

- name: apigw is running
  service:
    name: wso2apigw
    state: started
    enabled: yes
  tags:
    - cfg

- name: symlink to logfiles
  tags:
    - install
  file:
    src: "{{ wso2.dir }}/wso2am-{{ wso2.version }}/repository/logs"
    dest: /var/log/wso2apigw
    state: link

- name: firewall
  tags:
    - install
  firewalld:
    port: "{{ item }}"
    immediate: yes
    permanent: yes
    state: enabled
  with_items:
    - 9443/tcp
    - 8280/tcp
    - 8243/tcp

